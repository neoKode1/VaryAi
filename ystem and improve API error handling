[1mdiff --git a/src/app/api/vary-character/route.ts b/src/app/api/vary-character/route.ts[m
[1mindex cf5781b..ebd220c 100644[m
[1m--- a/src/app/api/vary-character/route.ts[m
[1m+++ b/src/app/api/vary-character/route.ts[m
[36m@@ -26,15 +26,36 @@[m [masync function uploadImageToTempUrl(base64Data: string): Promise<string> {[m
   }[m
 }[m
 [m
[31m-// Retry configuration for API calls[m
[32m+[m[32m// Enhanced retry configuration for API calls[m
 const RETRY_CONFIG = {[m
[31m-  maxRetries: 3,[m
[31m-  baseDelay: 1000, // 1 second[m
[31m-  maxDelay: 10000, // 10 seconds[m
[32m+[m[32m  maxRetries: 5, // Increased from 3 to handle the 18% failure rate[m
[32m+[m[32m  baseDelay: 2000, // Increased to 2 seconds for better spacing[m
[32m+[m[32m  maxDelay: 15000, // Increased to 15 seconds[m
   backoffMultiplier: 2,[m
[31m-  timeout: 30000, // 30 seconds timeout[m
[32m+[m[32m  timeout: 45000, // Increased to 45 seconds for nano-banana's longer processing times[m
 };[m
 [m
[32m+[m[32m// Success rate tracking[m
[32m+[m[32mlet apiStats = {[m
[32m+[m[32m  totalRequests: 0,[m
[32m+[m[32m  successfulRequests: 0,[m
[32m+[m[32m  failedRequests: 0,[m
[32m+[m[32m  lastReset: Date.now()[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32m// Reset stats every hour[m
[32m+[m[32mfunction resetStatsIfNeeded() {[m
[32m+[m[32m  const now = Date.now();[m
[32m+[m[32m  if (now - apiStats.lastReset > 3600000) { // 1 hour[m
[32m+[m[32m    apiStats = {[m
[32m+[m[32m      totalRequests: 0,[m
[32m+[m[32m      successfulRequests: 0,[m
[32m+[m[32m      failedRequests: 0,[m
[32m+[m[32m      lastReset: now[m
[32m+[m[32m    };[m
[32m+[m[32m  }[m
[32m+[m[32m}[m
[32m+[m
 // Timeout wrapper function[m
 function withTimeout<T>(promise: Promise<T>, timeoutMs: number): Promise<T> {[m
   return Promise.race([[m
[36m@@ -77,8 +98,10 @@[m [masync function retryWithBackoff<T>([m
         maxDelay[m
       );[m
       [m
[31m-      console.log(`⚠️ Attempt ${attempt + 1} failed, retrying in ${delay}ms...`);[m
[32m+[m[32m      const errorInfo = categorizeError(lastError);[m
[32m+[m[32m      console.log(`⚠️ Attempt ${attempt + 1} failed (${errorInfo.category}), retrying in ${delay}ms...`);[m
       console.log(`📊 Error: ${lastError.message}`);[m
[32m+[m[32m      console.log(`💬 User message: ${errorInfo.userMessage}`);[m
       [m
       await new Promise(resolve => setTimeout(resolve, delay));[m
     }[m
[36m@@ -87,24 +110,95 @@[m [masync function retryWithBackoff<T>([m
   throw lastError!;[m
 }[m
 [m
[32m+[m[32m// Enhanced error categorization[m
[32m+[m[32mfunction categorizeError(error: Error): { category: string; retryable: boolean; userMessage: string } {[m
[32m+[m[32m  const message = error.message.toLowerCase();[m
[32m+[m[41m  [m
[32m+[m[32m  // Network/Infrastructure errors (retryable)[m
[32m+[m[32m  if (message.includes('503') || message.includes('service unavailable')) {[m
[32m+[m[32m    return {[m
[32m+[m[32m      category: 'infrastructure',[m
[32m+[m[32m      retryable: true,[m
[32m+[m[32m      userMessage: 'Service temporarily unavailable. Retrying...'[m
[32m+[m[32m    };[m
[32m+[m[32m  }[m
[32m+[m[41m  [m
[32m+[m[32m  if (message.includes('502') || message.includes('bad gateway')) {[m
[32m+[m[32m    return {[m
[32m+[m[32m      category: 'infrastructure',[m
[32m+[m[32m      retryable: true,[m
[32m+[m[32m      userMessage: 'Server error. Retrying...'[m
[32m+[m[32m    };[m
[32m+[m[32m  }[m
[32m+[m[41m  [m
[32m+[m[32m  if (message.includes('504') || message.includes('gateway timeout')) {[m
[32m+[m[32m    return {[m
[32m+[m[32m      category: 'timeout',[m
[32m+[m[32m      retryable: true,[m
[32m+[m[32m      userMessage: 'Request timed out. Retrying...'[m
[32m+[m[32m    };[m
[32m+[m[32m  }[m
[32m+[m[41m  [m
[32m+[m[32m  if (message.includes('429') || message.includes('too many requests') || message.includes('rate limit exceeded')) {[m
[32m+[m[32m    return {[m
[32m+[m[32m      category: 'rate_limit',[m
[32m+[m[32m      retryable: true,[m
[32m+[m[32m      userMessage: 'Rate limit reached. Waiting before retry...'[m
[32m+[m[32m    };[m
[32m+[m[32m  }[m
[32m+[m[41m  [m
[32m+[m[32m  if (message.includes('timeout') || message.includes('econnreset') || message.includes('enotfound') || message.includes('etimedout') || message.includes('network error')) {[m
[32m+[m[32m    return {[m
[32m+[m[32m      category: 'network',[m
[32m+[m[32m      retryable: true,[m
[32m+[m[32m      userMessage: 'Network issue. Retrying...'[m
[32m+[m[32m    };[m
[32m+[m[32m  }[m
[32m+[m[41m  [m
[32m+[m[32m  if (message.includes('overloaded') || message.includes('quota exceeded')) {[m
[32m+[m[32m    return {[m
[32m+[m[32m      category: 'capacity',[m
[32m+[m[32m      retryable: true,[m
[32m+[m[32m      userMessage: 'Service overloaded. Retrying...'[m
[32m+[m[32m    };[m
[32m+[m[32m  }[m
[32m+[m[41m  [m
[32m+[m[32m  // Content/API errors (not retryable)[m
[32m+[m[32m  if (message.includes('400') || message.includes('bad request')) {[m
[32m+[m[32m    return {[m
[32m+[m[32m      category: 'invalid_request',[m
[32m+[m[32m      retryable: false,[m
[32m+[m[32m      userMessage: 'Invalid request. Please check your input.'[m
[32m+[m[32m    };[m
[32m+[m[32m  }[m
[32m+[m[41m  [m
[32m+[m[32m  if (message.includes('401') || message.includes('unauthorized')) {[m
[32m+[m[32m    return {[m
[32m+[m[32m      category: 'auth',[m
[32m+[m[32m      retryable: false,[m
[32m+[m[32m      userMessage: 'Authentication failed. Please check API keys.'[m
[32m+[m[32m    };[m
[32m+[m[32m  }[m
[32m+[m[41m  [m
[32m+[m[32m  if (message.includes('content') && message.includes('moderation')) {[m
[32m+[m[32m    return {[m
[32m+[m[32m      category: 'content_moderation',[m
[32m+[m[32m      retryable: false,[m
[32m+[m[32m      userMessage: 'Content flagged by moderation. Please try a different prompt.'[m
[32m+[m[32m    };[m
[32m+[m[32m  }[m
[32m+[m[41m  [m
[32m+[m[32m  // Default case[m
[32m+[m[32m  return {[m
[32m+[m[32m    category: 'unknown',[m
[32m+[m[32m    retryable: true,[m
[32m+[m[32m    userMessage: 'Unexpected error. Retrying...'[m
[32m+[m[32m  };[m
[32m+[m[32m}[m
[32m+[m
 // Check if an error is retryable[m
 function isRetryableError(error: Error): boolean {[m
[31m-  const retryableErrors = [[m
[31m-    '503 Service Unavailable',[m
[31m-    'The model is overloaded',[m
[31m-    'rate limit exceeded',[m
[31m-    'quota exceeded',[m
[31m-    'internal server error',[m
[31m-    'bad gateway',[m
[31m-    'service unavailable',[m
[31m-    'timeout',[m
[31m-    'network error'[m
[31m-  ];[m
[31m-  [m
[31m-  const errorMessage = error.message.toLowerCase();[m
[31m-  return retryableErrors.some(retryableError => [m
[31m-    errorMessage.includes(retryableError.toLowerCase())[m
[31m-  );[m
[32m+[m[32m  return categorizeError(error).retryable;[m
 }[m
 [m
 // Try alternative models if the primary one fails[m
[36m@@ -211,9 +305,15 @@[m [mif (process.env.FAL_KEY) {[m
 export async function POST(request: NextRequest) {[m
   console.log('🚀 API Route: /api/vary-character - Request received');[m
   [m
[32m+[m[32m  // Reset stats if needed[m
[32m+[m[32m  resetStatsIfNeeded();[m
[32m+[m[32m  apiStats.totalRequests++;[m
[32m+[m[41m  [m
   // Check circuit breaker[m
   if (!shouldAllowRequest()) {[m
     console.log('🚨 Circuit breaker is open, rejecting request');[m
[32m+[m[32m    apiStats.failedRequests++;[m
[32m+[m[32m    console.log(`📊 Current success rate: ${((apiStats.successfulRequests / apiStats.totalRequests) * 100).toFixed(1)}%`);[m
     return NextResponse.json({[m
       success: false,[m
       error: 'Service temporarily unavailable due to repeated failures. Please try again in a moment.',[m
[36m@@ -410,12 +510,12 @@[m [mMaintain character consistency while respecting the user's detailed vision and e[m
               console.log(`🤖 Using Nano Banana model: ${modelName}`);[m
               [m
               return await fal.subscribe(modelName, {[m
[31m-                input: {[m
[32m+[m[32m              input: {[m
                   prompt: nanoBananaPrompt,[m
                   image_urls: imageUrls, // Use all uploaded image URLs for character + scene combination[m
[31m-                  num_images: 1,[m
[31m-                  output_format: "jpeg"[m
[31m-                },[m
[32m+[m[32m                num_images: 1,[m
[32m+[m[32m                output_format: "jpeg"[m
[32m+[m[32m              },[m
               logs: true,[m
               onQueueUpdate: (update) => {[m
                 if (update.status === "IN_PROGRESS") {[m
[36m@@ -459,6 +559,10 @@[m [mMaintain character consistency while respecting the user's detailed vision and e[m
     [m
     // Record success for circuit breaker[m
     recordSuccess();[m
[32m+[m[32m    apiStats.successfulRequests++;[m
[32m+[m[41m    [m
[32m+[m[32m    const successRate = ((apiStats.successfulRequests / apiStats.totalRequests) * 100).toFixed(1);[m
[32m+[m[32m    console.log(`✅ Request completed successfully. Success rate: ${successRate}% (${apiStats.successfulRequests}/${apiStats.totalRequests})`);[m
     [m
     return NextResponse.json({[m
       success: true,[m
[36m@@ -473,6 +577,10 @@[m [mMaintain character consistency while respecting the user's detailed vision and e[m
     [m
     // Record failure for circuit breaker[m
     recordFailure();[m
[32m+[m[32m    apiStats.failedRequests++;[m
[32m+[m[41m    [m
[32m+[m[32m    const successRate = ((apiStats.successfulRequests / apiStats.totalRequests) * 100).toFixed(1);[m
[32m+[m[32m    console.log(`❌ Request failed. Success rate: ${successRate}% (${apiStats.successfulRequests}/${apiStats.totalRequests})`);[m
     [m
     let errorMessage = 'An unexpected error occurred';[m
     let statusCode = 500;[m
